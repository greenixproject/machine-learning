# -*- coding: utf-8 -*-
"""vehicle_emission_motorcycle

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RRxYxbDhGjnoY8w-1lAb06GhKu6Gi6G7

EMISI CARBON (CO2) FOOTPRINT VEHICLE MOTORCYCLE
1. Emisi karbon banyak terutama dari aktivitas sehari-hari salah satunya adalah dari penggunaan kendaraan bermotor salah satunya yaitu motor. 
2. Awareness masyarakat masih kurang tentang karbon yang dapat dihasilkan
3. Dari permasalahan tersebut, pada project kali ini kami akan membuat prediksi emisi karbon yang dihasilkan dari kendaraan bermotor
4. Data yang kami gunakan diambil dan dikumpulkan dari survei kepada responden, jurnal dan website lainnya
"""

!pip install tensorflow==2.8.0

# Import library
import pandas as pd
import numpy as np
from scipy import stats

from sklearn import linear_model
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.models import save_model

import matplotlib.pyplot as plt
import seaborn as sns

from google.colab import drive
drive.mount('/content/drive', force_remount=True)

"""## Load Data"""

# Menentukan path file CSV yang telah diunggah
file_path = '/content/drive/MyDrive/Vehicle_Greenix/Dataset/vehicle_motor.csv'

# Membaca file CSV ke DataFrame
df = pd.read_csv(file_path)

# Menampilkan beberapa baris pertama DataFrame
print(df.head())

"""Keterangan kolom:
- nomer: Nomor urut responden
- nama: Nama responden
- email: Email responden
- motor_class : Pembagian Jenis-jenis motor berdasarkan cc motor dimana dibagi 4 jenis yaitu 110_cc, 125_cc, 1150_cc, 250_cc
- motor_subclass : Pembagian Jenis pembakaran bahan bakar pada mesin yang terbagi menjadi 2 jenis yaitu injeksi dan karburator
- fuel_type : Pembagian Jenis bahan bakar yang biasanya digunakan pada motor di Indonesia yaitu Petrol (Premium, Pertalite, Pertamax, dan Sejenisnya).
- fuel_consumption: Konsumsi bahan bakar setiap jenis motor dengan skala 1L / 100KM
- emmisions_factor: Faktor emisi berdasarkan jenis bahan bakarnya
- distanced: Jarak yang ditempuh oleh kendaraan dalam sekali perjalanan dengan satuan kilometer
- emissions: Nilai emisi yang dihasilkan tiap kendaraan dengan formula 
emisi = ((jarak + konsumsi bahan bakar) * faktor emisi)

## DATA CLEANING
"""

# cek data duplikat
df.duplicated().sum()

# Membersihkan data yang tidak lengkap (Jika ada)
df = df.dropna(axis=0)

df = df.drop(['no',	'nama',	'email', 'fuel_type'], axis=1)

"""## Data Preprocessing"""

# Mengambil kolom numerik untuk perhitungan Z-score
numeric_columns = ['fuel_consumption(L/100Km)',	'emission_factor',	'distanced',	'emissions']

# Mendeteksi outliers dengan Z-score
z_scores = stats.zscore(df[numeric_columns])
abs_z_scores = np.abs(z_scores)
filtered_entries = (abs_z_scores < 3).all(axis=1)  
# Menghilangkan data dengan Z-score lebih dari 3
data = df[filtered_entries]

"""## Eksplorasi Data"""

df.head()

# Melihat jumlah baris dan kolom
df.shape

# Melihat info statistik data
df.describe()

# Melihat tipe data
print(df.dtypes)

# melihat missing values
df[df==0].count()

motor_emissions_columns = {
    'Motor': ['fuel_consumption(L/100Km)',	'emission_factor',	'distanced',	'emissions'],
}

# Membuat subplots untuk masing-masing motor
fig, axes = plt.subplots(1, 1, figsize=(8, 6))

# Meloopi setiap motor
for motor, columns in motor_emissions_columns.items():
    # Subset kolom untuk motor tertentu
    subset = df[columns].corr()
    
    # Heatmap untuk motor tertentu
    sns.heatmap(subset, annot=True, ax=axes)
    axes.set_title(f'Korelasi {car.capitalize()}')

# Menampilkan plot
plt.tight_layout()
plt.show()

# Mengambil kolom numerik untuk perhitungan Z-score
numeric_columns = ['fuel_consumption(L/100Km)',	'emission_factor',	'distanced',	'emissions']

"""### Feature Selection
Akan dilakukan pemisahan fitur dan target untuk setiap kendaraan. 
Yang menjadi fitur adalah 'distanced', 'fuel_comsumption(L/100 Km)', dan 'emissions_factor', sedangkan untuk target kami adalah 'emissions'.
"""

# Memisahkan fitur dan target untuk motor
motor_features = df[['fuel_consumption(L/100Km)',	'emission_factor',	'distanced']]
motor_target = df['emissions']

"""# Normalize the features"""

# Menormalkan Fitur 
scaler = StandardScaler()
motor_features_normalized = scaler.fit_transform(motor_features)

"""### Splitting Data
Data yang digunakan untuk training sebanyak 80% dan testing sebanyak 20%
"""

# Membagi data motor menjadi set pelatihan dan pengujian
motor_X_train, motor_X_test, motor_y_train, motor_y_test = train_test_split(motor_features, motor_target, test_size=0.2, random_state=42)

"""### Modelling 
Melatih model dengan regresi linier untuk setiap motor
"""

# Melatih model regresi linier untuk motor
motor_model = LinearRegression()
motor_model.fit(motor_X_train, motor_y_train)

# Melakukan prediksi emisi karbon dari konsumsi motor
motor_y_pred = motor_model.predict(motor_X_test)

# Menghitung evaluasi performa model untuk motor
motor_mse = mean_squared_error(motor_y_test, motor_y_pred)
motor_r2 = r2_score(motor_y_test, motor_y_pred)

"""Untuk evaluasi performa model ini menggunakan MSE dibanding MAE karen beberapa pertimbangan-pertimbangan berikut:
1. Dalam perhitungan MSE, bobot yang diberikan pada kesalahan yang besar lebih tinggi karena selisih antara nilai prediksi dan nilai sebenarnya di kuadratkan. Hal ini memungkinkan pengidentifikasian dan penekanan pada outlier atau kesalahan prediksi yang signifikan dalam model. Saya mengutamakan identifikasi kesalahan prediksi yang penting dan membutuhkan perhatian lebih.
2. Selain itu saya juga ingin mengukur kesalahan prediksi dalam skala yang sama dengan variabel target, yaitu emisi karbon. MSE memberikan hasil dalam satuan kuadrat (misalnya, kg CO2e^2), yang konsisten dengan skala variabel target. Sehingga saya ingin memastikan bahwa ukuran kesalahan yang saya gunakan sesuai dengan skala yang relevan.
3. MSE memberikan penekanan lebih pada kesalahan yang lebih besar karena mengkuadratkan selisih antara prediksi dan nilai sebenarnya. Sebagai seorang data scientist, saya ingin memastikan bahwa kesalahan prediksi yang signifikan memiliki dampak yang lebih besar pada penilaian performa model.
"""

import numpy as np
import matplotlib.pyplot as plt

# Visualisasi dan garis regresi untuk motor
plt.scatter(motor_y_test, motor_y_pred, color='blue', alpha=0.5)
plt.plot(np.unique(motor_y_test), np.poly1d(np.polyfit(motor_y_test, motor_y_pred, 1))(np.unique(motor_y_test)), color='red')
plt.xlabel('Nilai Sebenarnya')
plt.ylabel('Prediksi')
plt.title('Prediksi Emisi Karbon - Motor')
plt.show()

# Menampilkan hasil evaluasi performa model
print("Hasil evaluasi performa model untuk car:")
print("MSE:", motor_mse)
print("R-squared:", motor_r2)

"""# Interpretasi

**Evaluasi performa model untuk mobil:**
- MSE (Mean Squared Error): 1.496211163218264
- R-squared: 0.8736877684934633
- Evaluasi performa model untuk motor menunjukkan hasil yang baik. Nilai MSE yang rendah dan nilai R-squared yang cukup tinggi menunjukkan bahwa model regresi linear untuk motor memiliki tingkat kesalahan yang relatif kecil dan mampu menjelaskan sekitar 87.36% variasi dalam emisi karbon motor.

# Membuat model Deep Learning. 
- model neural network dengan 3 layer untuk memprediksi emisi karbon dari konsumsi masing-masing kendaraan.
- menggunakan fungsi aktivasi relu pada layer pertama dan kedua, dan tidak menggunakan fungsi aktivasi pada layer output karena masalah regresi.
- Data diskalakan agar model dapat lebih efisien (menggunakan StandardScaler dari scikit-learn )
"""

# Standarisasi fitur dengan StandardScaler
scaler = StandardScaler()
motor_X_train_scaled = scaler.fit_transform(motor_X_train)
motor_X_test_scaled = scaler.transform(motor_X_test)

# Create the model
motor_model_tf = Sequential()
motor_model_tf.add(Dense(128, input_dim=motor_X_train_scaled.shape[1], activation='relu'))
motor_model_tf.add(Dense(64, activation='relu'))
motor_model_tf.add(Dense(1))

# Compile the model
motor_model_tf.compile(loss='mean_squared_error', optimizer='adam')


motor_model_tf.fit(motor_X_train_scaled, motor_y_train, epochs=20, batch_size=64, validation_split=0.2)

# Reshape the input data to have shape (None, 3)
motor_X_test_scaled_reshaped = motor_X_test_scaled.reshape(-1, 3)

# Predict the output for new data
motor_y_pred_tf = motor_model_tf.predict(motor_X_test_scaled_reshaped)

# Evaluate the model
motor_mse_tf = mean_squared_error(motor_y_test, motor_y_pred_tf)
motor_rmse_tf = np.sqrt(motor_mse_tf)
motor_r2_tf = r2_score(motor_y_test, motor_y_pred_tf)

print("Hasil evaluasi performa model TensorFlow untuk Motor:")
print("MSE:", motor_mse_tf)
print("RMSE:", motor_rmse_tf)
print("R-squared:", motor_r2_tf)

"""**SAVE MODEL**
### kita akan save model dalam bentuk h5 dan sebagai alternatif akan dikonversi kedalam bentuk tflite.
"""

from google.colab import drive
drive.mount('/content/gdrive', force_remount=True)

motor_model_tf.save('/content/gdrive/MyDrive/Vehicle_Greenix/Model/motor_model.h5')

import tensorflow as tf
from tensorflow.keras.models import load_model

# Load the saved model.
model = load_model('/content/gdrive/MyDrive/Vehicle_Greenix/Model/motor_model.h5')

# Convert the model to TFLite.
converter = tf.lite.TFLiteConverter.from_keras_model(model)
tflite_model = converter.convert()

# Save the TFLite model.
with open('car_model.tflite', 'wb') as f:
    f.write(tflite_model)

motor_model_tf.save('/content/gdrive/MyDrive/Vehicle_Greenix/Model/motor_model.tflite')

from tensorflow.keras.models import load_model

# Load model
motor_model = load_model('/content/gdrive/MyDrive/Vehicle_Greenix/Model/motor_model.h5')

"""Make Prediction New Data With Our Model

"""

import tensorflow as tf
import numpy as np

# Load the model
model = tf.keras.models.load_model('/content/gdrive/MyDrive/Vehicle_Greenix/Model/motor_model.h5')

# Define the new data
distance = 10
fuel_consumption = 1
placeholder_value = 0

# Scale the new data
new_data = np.array([[distance, fuel_consumption, placeholder_value]])

# Make a prediction
prediction = model.predict(new_data)

# Print the prediction
print("Prediksi Emisi Motor adalah:", prediction[0])