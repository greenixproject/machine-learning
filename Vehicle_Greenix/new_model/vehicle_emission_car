{"cells":[{"cell_type":"markdown","metadata":{"id":"eb59f57a-145c-4291-9810-7991d64a2693"},"source":["EMISI CARBON (CO2) FOOTPRINT VEHICLE CAR\n","1. Emisi karbon banyak terutama dari aktivitas sehari-hari salah satunya kendaraan bermotor salah satunya yaitu mobil. \n","2. Awareness masyarakat masih kurang tentang karbon yang dapat dihasilkan\n","3. Dari permasalahan tersebut, pada project kali ini kami akan membuat prediksi emisi karbon yang dihasilkan dari kendaraan bermotor\n","4. Data yang kami gunakan diambil dan dikumpulkan dari survei kepada responden, jurnal dan website lainnya\n"],"id":"eb59f57a-145c-4291-9810-7991d64a2693"},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"14727ac1-1e7d-4eac-a06c-3fd181e00dbb","executionInfo":{"status":"ok","timestamp":1686558564066,"user_tz":-420,"elapsed":16453,"user":{"displayName":"Novy Any Waruwu M284DSY0271","userId":"14468914389326099210"}},"outputId":"e85fa4c5-db3a-4139-c667-060ba659e33e"},"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: tensorflow==2.8.0 in /usr/local/lib/python3.10/dist-packages (2.8.0)\n","Requirement already satisfied: absl-py>=0.4.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow==2.8.0) (1.4.0)\n","Requirement already satisfied: astunparse>=1.6.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow==2.8.0) (1.6.3)\n","Requirement already satisfied: flatbuffers>=1.12 in /usr/local/lib/python3.10/dist-packages (from tensorflow==2.8.0) (23.3.3)\n","Requirement already satisfied: gast>=0.2.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow==2.8.0) (0.4.0)\n","Requirement already satisfied: google-pasta>=0.1.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow==2.8.0) (0.2.0)\n","Requirement already satisfied: h5py>=2.9.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow==2.8.0) (3.8.0)\n","Requirement already satisfied: keras-preprocessing>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow==2.8.0) (1.1.2)\n","Requirement already satisfied: libclang>=9.0.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow==2.8.0) (16.0.0)\n","Requirement already satisfied: numpy>=1.20 in /usr/local/lib/python3.10/dist-packages (from tensorflow==2.8.0) (1.22.4)\n","Requirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.10/dist-packages (from tensorflow==2.8.0) (3.3.0)\n","Requirement already satisfied: protobuf>=3.9.2 in /usr/local/lib/python3.10/dist-packages (from tensorflow==2.8.0) (3.20.3)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.10/dist-packages (from tensorflow==2.8.0) (67.7.2)\n","Requirement already satisfied: six>=1.12.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow==2.8.0) (1.16.0)\n","Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow==2.8.0) (2.3.0)\n","Requirement already satisfied: typing-extensions>=3.6.6 in /usr/local/lib/python3.10/dist-packages (from tensorflow==2.8.0) (4.5.0)\n","Requirement already satisfied: wrapt>=1.11.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow==2.8.0) (1.14.1)\n","Requirement already satisfied: tensorboard<2.9,>=2.8 in /usr/local/lib/python3.10/dist-packages (from tensorflow==2.8.0) (2.8.0)\n","Requirement already satisfied: tf-estimator-nightly==2.8.0.dev2021122109 in /usr/local/lib/python3.10/dist-packages (from tensorflow==2.8.0) (2.8.0.dev2021122109)\n","Requirement already satisfied: keras<2.9,>=2.8.0rc0 in /usr/local/lib/python3.10/dist-packages (from tensorflow==2.8.0) (2.8.0)\n","Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow==2.8.0) (0.32.0)\n","Requirement already satisfied: grpcio<2.0,>=1.24.3 in /usr/local/lib/python3.10/dist-packages (from tensorflow==2.8.0) (1.54.0)\n","Requirement already satisfied: wheel<1.0,>=0.23.0 in /usr/local/lib/python3.10/dist-packages (from astunparse>=1.6.0->tensorflow==2.8.0) (0.40.0)\n","Requirement already satisfied: google-auth<3,>=1.6.3 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.9,>=2.8->tensorflow==2.8.0) (2.17.3)\n","Requirement already satisfied: google-auth-oauthlib<0.5,>=0.4.1 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.9,>=2.8->tensorflow==2.8.0) (0.4.6)\n","Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.9,>=2.8->tensorflow==2.8.0) (3.4.3)\n","Requirement already satisfied: requests<3,>=2.21.0 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.9,>=2.8->tensorflow==2.8.0) (2.27.1)\n","Requirement already satisfied: tensorboard-data-server<0.7.0,>=0.6.0 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.9,>=2.8->tensorflow==2.8.0) (0.6.1)\n","Requirement already satisfied: tensorboard-plugin-wit>=1.6.0 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.9,>=2.8->tensorflow==2.8.0) (1.8.1)\n","Requirement already satisfied: werkzeug>=0.11.15 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.9,>=2.8->tensorflow==2.8.0) (2.3.0)\n","Requirement already satisfied: cachetools<6.0,>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.9,>=2.8->tensorflow==2.8.0) (5.3.0)\n","Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.10/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.9,>=2.8->tensorflow==2.8.0) (0.3.0)\n","Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.10/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.9,>=2.8->tensorflow==2.8.0) (4.9)\n","Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from google-auth-oauthlib<0.5,>=0.4.1->tensorboard<2.9,>=2.8->tensorflow==2.8.0) (1.3.1)\n","Requirement already satisfied: urllib3<1.27,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorboard<2.9,>=2.8->tensorflow==2.8.0) (1.26.15)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorboard<2.9,>=2.8->tensorflow==2.8.0) (2022.12.7)\n","Requirement already satisfied: charset-normalizer~=2.0.0 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorboard<2.9,>=2.8->tensorflow==2.8.0) (2.0.12)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorboard<2.9,>=2.8->tensorflow==2.8.0) (3.4)\n","Requirement already satisfied: MarkupSafe>=2.1.1 in /usr/local/lib/python3.10/dist-packages (from werkzeug>=0.11.15->tensorboard<2.9,>=2.8->tensorflow==2.8.0) (2.1.2)\n","Requirement already satisfied: pyasn1<0.6.0,>=0.4.6 in /usr/local/lib/python3.10/dist-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard<2.9,>=2.8->tensorflow==2.8.0) (0.5.0)\n","Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.10/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<0.5,>=0.4.1->tensorboard<2.9,>=2.8->tensorflow==2.8.0) (3.2.2)\n"]}],"source":["!pip install tensorflow==2.8.0"],"id":"14727ac1-1e7d-4eac-a06c-3fd181e00dbb"},{"cell_type":"code","execution_count":4,"metadata":{"id":"f60946c7-8a76-4210-99eb-204fd22ad578","executionInfo":{"status":"ok","timestamp":1686559545416,"user_tz":-420,"elapsed":381,"user":{"displayName":"Novy Any Waruwu M284DSY0271","userId":"14468914389326099210"}}},"outputs":[],"source":["# Import library\n","import os\n","import pandas as pd\n","import numpy as np\n","from scipy import stats\n","\n","from sklearn import linear_model\n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LinearRegression\n","from sklearn.metrics import mean_squared_error, r2_score\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.metrics import mean_squared_error\n","\n","import tensorflow as tf\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense\n","from tensorflow.keras.models import save_model\n","\n","import matplotlib.pyplot as plt\n","import seaborn as sns"],"id":"f60946c7-8a76-4210-99eb-204fd22ad578"},{"cell_type":"code","execution_count":5,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6142,"status":"ok","timestamp":1686559554281,"user":{"displayName":"Novy Any Waruwu M284DSY0271","userId":"14468914389326099210"},"user_tz":-420},"id":"dy441P_y0t4b","outputId":"46e96710-5a1d-48f5-f1d1-6386d75b1a94"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive', force_remount=True)"],"id":"dy441P_y0t4b"},{"cell_type":"markdown","metadata":{"id":"NJcTypnnU7wM"},"source":["## Load Data"],"id":"NJcTypnnU7wM"},{"cell_type":"code","execution_count":6,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":558,"status":"ok","timestamp":1686559557713,"user":{"displayName":"Novy Any Waruwu M284DSY0271","userId":"14468914389326099210"},"user_tz":-420},"id":"OhO6QUF9b29L","outputId":"d77d91b0-6f58-401c-8708-311306f54eb0"},"outputs":[{"output_type":"stream","name":"stdout","text":["   no         nama                       email car_class fuel_type  \\\n","0   1      Nur ***  *******arizkiyah@gmail.com   Compact    Diesel   \n","1   2  Syakira ***     *******akiras@gmail.com   Compact    Diesel   \n","2   3  Nisrinaa **        *******alm@gmail.com   Compact    Diesel   \n","3   4     Ghozi **        *******ya2@gmail.com   Compact    Diesel   \n","4   5      Sarah *      *******lla49@gmail.com   Compact    Diesel   \n","\n","   fuel_consumption(L/100 Km)  emissions_factor  distanced  emissions  \n","0                        5.23           0.00282         13     0.0514  \n","1                        5.23           0.00282         44     0.1388  \n","2                        5.23           0.00282         21     0.0740  \n","3                        5.23           0.00282         57     0.1755  \n","4                        5.23           0.00282         85     0.2544  \n"]}],"source":["# Menentukan path file CSV yang telah diunggah\n","file_path = '/content/drive/MyDrive/Vehicle_Greenix/Dataset/vehicle_car.csv'\n","\n","# Membaca file CSV ke DataFrame\n","df = pd.read_csv(file_path)\n","\n","# Menampilkan beberapa baris pertama DataFrame\n","print(df.head())"],"id":"OhO6QUF9b29L"},{"cell_type":"markdown","metadata":{"id":"ZImOZswUVKP9"},"source":["Keterangan kolom:\n","- nomer: Nomor urut responden\n","- nama: Nama responden\n","- email: Email responden\n","- car_class : Pembagian Jenis-jenis mobil berdasarkan ukuran mobil dimana dibagi 3 jenis yaitu Compact, Mid-Range-, SUV/VAN\n","- fuel_type : Pembagian Jenis-jenis bahan bakar yang biasanya digunakan pada mobil di Indonesia dimana terdapat 3 jenis yaitu Diesel (Solar, Dex), Petrol (Premium, Pertalite, Pertamax, dan Sejenisnya), Hybrid (Gabungan petrol dan elektrik yang mana teknologi ini sudah diterapkan dibeberapa mobil konvensional di Indonesia)\n","- fuel_consumption: Konsumsi bahan bakar setiap jenis mobil dengan skala 1L / 100KM\n","- emmisions_factor: Faktor emisi berdasarkan jenis bahan bakarnya\n","- distanced: Jarak yang ditempuh oleh kendaraan dalam sekali perjalanan dengan satuan kilometer\n","- emissions: Nilai emisi yang dihasilkan tiap kendaraan dengan formula \n","emisi = ((jarak + konsumsi bahan bakar) * faktor emisi)"],"id":"ZImOZswUVKP9"},{"cell_type":"markdown","metadata":{"id":"65bbcbde-2bf0-4727-beaf-f55b9eddd8e5"},"source":["## DATA CLEANING"],"id":"65bbcbde-2bf0-4727-beaf-f55b9eddd8e5"},{"cell_type":"code","execution_count":7,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":612,"status":"ok","timestamp":1686559562751,"user":{"displayName":"Novy Any Waruwu M284DSY0271","userId":"14468914389326099210"},"user_tz":-420},"id":"FsEkZBFAVE0G","outputId":"091d3351-af2a-4f44-b974-17596a2b96db"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{},"execution_count":7}],"source":["# cek data duplikat\n","df.duplicated().sum()"],"id":"FsEkZBFAVE0G"},{"cell_type":"code","execution_count":8,"metadata":{"id":"og-cB2x9VYhK","executionInfo":{"status":"ok","timestamp":1686559564171,"user_tz":-420,"elapsed":8,"user":{"displayName":"Novy Any Waruwu M284DSY0271","userId":"14468914389326099210"}}},"outputs":[],"source":["# Membersihkan data yang tidak lengkap (Jika ada)\n","df = df.dropna(axis=0)"],"id":"og-cB2x9VYhK"},{"cell_type":"code","execution_count":9,"metadata":{"id":"505f80a1-87a4-4fc9-90c2-557c04af2883","executionInfo":{"status":"ok","timestamp":1686559567075,"user_tz":-420,"elapsed":460,"user":{"displayName":"Novy Any Waruwu M284DSY0271","userId":"14468914389326099210"}}},"outputs":[],"source":["df = df.drop(['no',\t'nama',\t'email'], axis=1)"],"id":"505f80a1-87a4-4fc9-90c2-557c04af2883"},{"cell_type":"markdown","metadata":{"id":"HHiwRPSTXZ9P"},"source":["## Data Preprocessing"],"id":"HHiwRPSTXZ9P"},{"cell_type":"code","execution_count":10,"metadata":{"id":"SQmL1Z3AXZKN","executionInfo":{"status":"ok","timestamp":1686559569185,"user_tz":-420,"elapsed":357,"user":{"displayName":"Novy Any Waruwu M284DSY0271","userId":"14468914389326099210"}}},"outputs":[],"source":["# Mengambil kolom numerik untuk perhitungan Z-score\n","numeric_columns = ['fuel_consumption(L/100 Km)',\t'emissions_factor',\t'distanced',\t'emissions']"],"id":"SQmL1Z3AXZKN"},{"cell_type":"code","execution_count":11,"metadata":{"id":"ybDi2uB7XnRl","executionInfo":{"status":"ok","timestamp":1686559573660,"user_tz":-420,"elapsed":383,"user":{"displayName":"Novy Any Waruwu M284DSY0271","userId":"14468914389326099210"}}},"outputs":[],"source":["# Mendeteksi outliers dengan Z-score\n","z_scores = stats.zscore(df[numeric_columns])\n","abs_z_scores = np.abs(z_scores)\n","filtered_entries = (abs_z_scores < 3).all(axis=1)  \n","# Menghilangkan data dengan Z-score lebih dari 3\n","data = df[filtered_entries]"],"id":"ybDi2uB7XnRl"},{"cell_type":"markdown","metadata":{"id":"dqvCAuoWVS9H"},"source":["## Eksplorasi Data"],"id":"dqvCAuoWVS9H"},{"cell_type":"code","execution_count":12,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"elapsed":410,"status":"ok","timestamp":1686559615822,"user":{"displayName":"Novy Any Waruwu M284DSY0271","userId":"14468914389326099210"},"user_tz":-420},"id":"lNgAPXmbV8GK","outputId":"9a890dce-e63c-435e-9128-70a1d4e30393"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["  car_class fuel_type  fuel_consumption(L/100 Km)  emissions_factor  \\\n","0   Compact    Diesel                        5.23           0.00282   \n","1   Compact    Diesel                        5.23           0.00282   \n","2   Compact    Diesel                        5.23           0.00282   \n","3   Compact    Diesel                        5.23           0.00282   \n","4   Compact    Diesel                        5.23           0.00282   \n","\n","   distanced  emissions  \n","0         13     0.0514  \n","1         44     0.1388  \n","2         21     0.0740  \n","3         57     0.1755  \n","4         85     0.2544  "],"text/html":["\n","  <div id=\"df-87b4b99f-41e8-4f24-9a03-e0591200d63c\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>car_class</th>\n","      <th>fuel_type</th>\n","      <th>fuel_consumption(L/100 Km)</th>\n","      <th>emissions_factor</th>\n","      <th>distanced</th>\n","      <th>emissions</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Compact</td>\n","      <td>Diesel</td>\n","      <td>5.23</td>\n","      <td>0.00282</td>\n","      <td>13</td>\n","      <td>0.0514</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Compact</td>\n","      <td>Diesel</td>\n","      <td>5.23</td>\n","      <td>0.00282</td>\n","      <td>44</td>\n","      <td>0.1388</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Compact</td>\n","      <td>Diesel</td>\n","      <td>5.23</td>\n","      <td>0.00282</td>\n","      <td>21</td>\n","      <td>0.0740</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Compact</td>\n","      <td>Diesel</td>\n","      <td>5.23</td>\n","      <td>0.00282</td>\n","      <td>57</td>\n","      <td>0.1755</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Compact</td>\n","      <td>Diesel</td>\n","      <td>5.23</td>\n","      <td>0.00282</td>\n","      <td>85</td>\n","      <td>0.2544</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-87b4b99f-41e8-4f24-9a03-e0591200d63c')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-87b4b99f-41e8-4f24-9a03-e0591200d63c button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-87b4b99f-41e8-4f24-9a03-e0591200d63c');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":12}],"source":["df.head()"],"id":"lNgAPXmbV8GK"},{"cell_type":"code","execution_count":13,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":24,"status":"ok","timestamp":1686559617664,"user":{"displayName":"Novy Any Waruwu M284DSY0271","userId":"14468914389326099210"},"user_tz":-420},"id":"Fogd8zdVWADJ","outputId":"42c123a6-7ca0-44e8-f35d-7f9765975fc8"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(649, 6)"]},"metadata":{},"execution_count":13}],"source":["# Melihat jumlah baris dan kolom\n","df.shape"],"id":"Fogd8zdVWADJ"},{"cell_type":"code","execution_count":14,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"executionInfo":{"elapsed":64,"status":"ok","timestamp":1686559619778,"user":{"displayName":"Novy Any Waruwu M284DSY0271","userId":"14468914389326099210"},"user_tz":-420},"id":"t7M3jsi9V8It","outputId":"f47553c2-b94c-4aa5-a8ab-3087bea965d0"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["       fuel_consumption(L/100 Km)  emissions_factor   distanced   emissions\n","count                  649.000000        649.000000  649.000000  649.000000\n","mean                     7.049661          0.008357   51.483821    0.490212\n","std                      1.904375          0.003063   28.933035    0.318264\n","min                      4.220000          0.002820    1.000000    0.020400\n","25%                      5.230000          0.006410   27.000000    0.225800\n","50%                      6.830000          0.007910   52.000000    0.424500\n","75%                      8.420000          0.011890   77.000000    0.716900\n","max                     10.010000          0.011910  100.000000    1.310200"],"text/html":["\n","  <div id=\"df-acb3f8c1-da01-4293-a68c-a73fe5002c43\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>fuel_consumption(L/100 Km)</th>\n","      <th>emissions_factor</th>\n","      <th>distanced</th>\n","      <th>emissions</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>649.000000</td>\n","      <td>649.000000</td>\n","      <td>649.000000</td>\n","      <td>649.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>7.049661</td>\n","      <td>0.008357</td>\n","      <td>51.483821</td>\n","      <td>0.490212</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>1.904375</td>\n","      <td>0.003063</td>\n","      <td>28.933035</td>\n","      <td>0.318264</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>4.220000</td>\n","      <td>0.002820</td>\n","      <td>1.000000</td>\n","      <td>0.020400</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>5.230000</td>\n","      <td>0.006410</td>\n","      <td>27.000000</td>\n","      <td>0.225800</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>6.830000</td>\n","      <td>0.007910</td>\n","      <td>52.000000</td>\n","      <td>0.424500</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>8.420000</td>\n","      <td>0.011890</td>\n","      <td>77.000000</td>\n","      <td>0.716900</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>10.010000</td>\n","      <td>0.011910</td>\n","      <td>100.000000</td>\n","      <td>1.310200</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-acb3f8c1-da01-4293-a68c-a73fe5002c43')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-acb3f8c1-da01-4293-a68c-a73fe5002c43 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-acb3f8c1-da01-4293-a68c-a73fe5002c43');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":14}],"source":["# Melihat info statistik data\n","df.describe()"],"id":"t7M3jsi9V8It"},{"cell_type":"code","execution_count":15,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":750,"status":"ok","timestamp":1686559623424,"user":{"displayName":"Novy Any Waruwu M284DSY0271","userId":"14468914389326099210"},"user_tz":-420},"id":"8dd4387e-222b-4324-8c7e-50928af70300","outputId":"8b2abe0a-2a3a-4073-854d-fe0182655f59"},"outputs":[{"output_type":"stream","name":"stdout","text":["car_class                      object\n","fuel_type                      object\n","fuel_consumption(L/100 Km)    float64\n","emissions_factor              float64\n","distanced                       int64\n","emissions                     float64\n","dtype: object\n"]}],"source":["# Melihat tipe data\n","print(df.dtypes)"],"id":"8dd4387e-222b-4324-8c7e-50928af70300"},{"cell_type":"code","execution_count":16,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":11,"status":"ok","timestamp":1686559624131,"user":{"displayName":"Novy Any Waruwu M284DSY0271","userId":"14468914389326099210"},"user_tz":-420},"id":"ef91ebcc-8cd8-40e1-93f4-77ba533a90b3","outputId":"4f322962-b003-40fa-cdaf-106a49f9f49f"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["car_class                     0\n","fuel_type                     0\n","fuel_consumption(L/100 Km)    0\n","emissions_factor              0\n","distanced                     0\n","emissions                     0\n","dtype: int64"]},"metadata":{},"execution_count":16}],"source":["# melihat missing values\n","df[df==0].count()"],"id":"ef91ebcc-8cd8-40e1-93f4-77ba533a90b3"},{"cell_type":"code","execution_count":17,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":607},"executionInfo":{"elapsed":1118,"status":"ok","timestamp":1686559627317,"user":{"displayName":"Novy Any Waruwu M284DSY0271","userId":"14468914389326099210"},"user_tz":-420},"id":"2ef23442-747d-4c62-8319-fa8deac55ccb","outputId":"fc5930fe-bd95-47e7-c04a-342c59d5aa51"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 2 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["car_emissions_columns = {\n","    'Car': ['fuel_consumption(L/100 Km)',\t'emissions_factor',\t'distanced', 'emissions'],\n","}\n","\n","# Membuat subplots untuk masing-masing mobil\n","fig, axes = plt.subplots(1, 1, figsize=(8, 6))\n","\n","# Meloopi setiap mobil\n","for car, columns in car_emissions_columns.items():\n","    # Subset kolom untuk mobil tertentu\n","    subset = df[columns].corr()\n","    \n","    # Heatmap untuk mobil tertentu\n","    sns.heatmap(subset, annot=True, ax=axes)\n","    axes.set_title(f'Korelasi {car.capitalize()}')\n","\n","# Menampilkan plot\n","plt.tight_layout()\n","plt.show()"],"id":"2ef23442-747d-4c62-8319-fa8deac55ccb"},{"cell_type":"code","execution_count":18,"metadata":{"id":"6OqBYRSU3gbQ","executionInfo":{"status":"ok","timestamp":1686559631455,"user_tz":-420,"elapsed":558,"user":{"displayName":"Novy Any Waruwu M284DSY0271","userId":"14468914389326099210"}}},"outputs":[],"source":["# Mengambil kolom numerik untuk perhitungan Z-score\n","numeric_columns = ['fuel_comsumption(km/L)',\t'emissions_factor',\t'distanced',\t'emissions']"],"id":"6OqBYRSU3gbQ"},{"cell_type":"markdown","metadata":{"id":"ce90d76b-3196-4c00-a8ab-7cc8e1748fcf"},"source":["### Feature Selection\n","Akan dilakukan pemisahan fitur dan target untuk setiap kendaraan. \n","Yang menjadi fitur adalah 'distanced', 'fuel_comsumption(L/100 Km)', dan 'emissions_factor', sedangkan untuk target kami adalah 'emissions'."],"id":"ce90d76b-3196-4c00-a8ab-7cc8e1748fcf"},{"cell_type":"code","execution_count":19,"metadata":{"id":"85f2b83c-8946-480e-8076-947103b3e5b3","executionInfo":{"status":"ok","timestamp":1686559634433,"user_tz":-420,"elapsed":455,"user":{"displayName":"Novy Any Waruwu M284DSY0271","userId":"14468914389326099210"}}},"outputs":[],"source":["# Memisahkan fitur dan target untuk mobil\n","car_features = df[['fuel_consumption(L/100 Km)',\t'emissions_factor',\t'distanced']]\n","car_target = df['emissions']"],"id":"85f2b83c-8946-480e-8076-947103b3e5b3"},{"cell_type":"markdown","source":["# Normalize the features"],"metadata":{"id":"zNpuiHj2wcbH"},"id":"zNpuiHj2wcbH"},{"cell_type":"code","source":["# Menormalkan Fitur \n","scaler = StandardScaler()\n","car_features_normalized = scaler.fit_transform(car_features)"],"metadata":{"id":"N4BRr8Vhwhc_","executionInfo":{"status":"ok","timestamp":1686559637623,"user_tz":-420,"elapsed":1219,"user":{"displayName":"Novy Any Waruwu M284DSY0271","userId":"14468914389326099210"}}},"id":"N4BRr8Vhwhc_","execution_count":20,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"e736fd42-a3b4-444c-91f8-353d6def2b81"},"source":["### Splitting Data\n","Data yang digunakan untuk training sebanyak 80% dan testing sebanyak 20%"],"id":"e736fd42-a3b4-444c-91f8-353d6def2b81"},{"cell_type":"code","execution_count":21,"metadata":{"id":"1cfcd3e8-9cca-4cbd-b43d-f7ed2bedde33","executionInfo":{"status":"ok","timestamp":1686559639282,"user_tz":-420,"elapsed":7,"user":{"displayName":"Novy Any Waruwu M284DSY0271","userId":"14468914389326099210"}}},"outputs":[],"source":["# Membagi data mobil menjadi set pelatihan dan pengujian\n","car_X_train, car_X_test, car_y_train, car_y_test = train_test_split(car_features, car_target, test_size=0.2, random_state=42)"],"id":"1cfcd3e8-9cca-4cbd-b43d-f7ed2bedde33"},{"cell_type":"markdown","metadata":{"id":"d1b80200-e348-4aff-926b-5bfaa4066987"},"source":["### Modelling \n","Melatih model dengan regresi linier untuk setiap mobil"],"id":"d1b80200-e348-4aff-926b-5bfaa4066987"},{"cell_type":"code","execution_count":22,"metadata":{"id":"ad32436c-5311-408e-a90c-a2d60804ddfe","executionInfo":{"status":"ok","timestamp":1686559642627,"user_tz":-420,"elapsed":572,"user":{"displayName":"Novy Any Waruwu M284DSY0271","userId":"14468914389326099210"}}},"outputs":[],"source":["# Melatih model regresi linier untuk mobil\n","car_model = LinearRegression()\n","car_model.fit(car_X_train, car_y_train)\n","\n","# Melakukan prediksi emisi karbon dari konsumsi mobil\n","car_y_pred = car_model.predict(car_X_test)\n","\n","# Menghitung evaluasi performa model untuk mobil\n","car_mse = mean_squared_error(car_y_test, car_y_pred)\n","car_r2 = r2_score(car_y_test, car_y_pred)"],"id":"ad32436c-5311-408e-a90c-a2d60804ddfe"},{"cell_type":"markdown","metadata":{"id":"b67e8786-0882-433e-8c88-d34cd0b66559"},"source":["Untuk evaluasi performa model ini menggunakan MSE dibanding MAE karen beberapa pertimbangan-pertimbangan berikut:\n","1. Dalam perhitungan MSE, bobot yang diberikan pada kesalahan yang besar lebih tinggi karena selisih antara nilai prediksi dan nilai sebenarnya di kuadratkan. Hal ini memungkinkan pengidentifikasian dan penekanan pada outlier atau kesalahan prediksi yang signifikan dalam model. Saya mengutamakan identifikasi kesalahan prediksi yang penting dan membutuhkan perhatian lebih.\n","2. Selain itu saya juga ingin mengukur kesalahan prediksi dalam skala yang sama dengan variabel target, yaitu emisi karbon. MSE memberikan hasil dalam satuan kuadrat (misalnya, kg CO2e^2), yang konsisten dengan skala variabel target. Sehingga saya ingin memastikan bahwa ukuran kesalahan yang saya gunakan sesuai dengan skala yang relevan.\n","3. MSE memberikan penekanan lebih pada kesalahan yang lebih besar karena mengkuadratkan selisih antara prediksi dan nilai sebenarnya. Sebagai seorang data scientist, saya ingin memastikan bahwa kesalahan prediksi yang signifikan memiliki dampak yang lebih besar pada penilaian performa model."],"id":"b67e8786-0882-433e-8c88-d34cd0b66559"},{"cell_type":"code","execution_count":23,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"executionInfo":{"elapsed":1223,"status":"ok","timestamp":1686559647771,"user":{"displayName":"Novy Any Waruwu M284DSY0271","userId":"14468914389326099210"},"user_tz":-420},"id":"580b4c1e-5a16-49e6-931c-f0807484de4b","outputId":"1ee5ed85-ff0f-44c5-c371-95cea295c593"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["import numpy as np\n","import matplotlib.pyplot as plt\n","\n","# Visualisasi dan garis regresi untuk mobil\n","plt.scatter(car_y_test, car_y_pred, color='blue', alpha=0.5)\n","plt.plot(np.unique(car_y_test), np.poly1d(np.polyfit(car_y_test, car_y_pred, 1))(np.unique(car_y_test)), color='red')\n","plt.xlabel('Nilai Sebenarnya')\n","plt.ylabel('Prediksi')\n","plt.title('Prediksi Emisi Karbon - Car')\n","plt.show()\n"],"id":"580b4c1e-5a16-49e6-931c-f0807484de4b"},{"cell_type":"code","execution_count":24,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":419,"status":"ok","timestamp":1686559653103,"user":{"displayName":"Novy Any Waruwu M284DSY0271","userId":"14468914389326099210"},"user_tz":-420},"id":"2007ac5d-505e-43f4-9162-5ea2cd48fd4e","outputId":"29694541-2626-4e37-fd0a-66b09a8a14a9"},"outputs":[{"output_type":"stream","name":"stdout","text":["Hasil evaluasi performa model untuk car:\n","MSE: 0.006740275480365197\n","R-squared: 0.925760132998354\n"]}],"source":["# Menampilkan hasil evaluasi performa model\n","print(\"Hasil evaluasi performa model untuk car:\")\n","print(\"MSE:\", car_mse)\n","print(\"R-squared:\", car_r2)"],"id":"2007ac5d-505e-43f4-9162-5ea2cd48fd4e"},{"cell_type":"markdown","metadata":{"id":"3cda82ef-df3f-4437-b0ab-5b67e1675267"},"source":["# Interpretasi\n","\n","**Evaluasi performa model untuk mobil:**\n","- MSE (Mean Squared Error): 0.006740275480365197\n","- R-squared: 0.925760132998354 \n","- Evaluasi performa model untuk mobil menunjukkan hasil yang baik. Nilai MSE yang rendah dan nilai R-squared yang cukup tinggi menunjukkan bahwa model regresi linear untuk mobil memiliki tingkat kesalahan yang relatif kecil dan mampu menjelaskan sekitar 92.57% variasi dalam emisi karbon mobil."],"id":"3cda82ef-df3f-4437-b0ab-5b67e1675267"},{"cell_type":"markdown","metadata":{"id":"dI5ZlRCrhipQ"},"source":["# Membuat model Deep Learning. \n","- model neural network dengan 3 layer untuk memprediksi emisi karbon dari konsumsi masing-masing kendaraan.\n","- menggunakan fungsi aktivasi relu pada layer pertama dan kedua, dan tidak menggunakan fungsi aktivasi pada layer output karena masalah regresi.\n","- Data diskalakan agar model dapat lebih efisien (menggunakan StandardScaler dari scikit-learn )"],"id":"dI5ZlRCrhipQ"},{"cell_type":"code","source":["# Standarisasi fitur dengan StandardScaler\n","scaler = StandardScaler()\n","car_X_train_scaled = scaler.fit_transform(car_X_train)\n","car_X_test_scaled = scaler.transform(car_X_test)\n","\n","# Create the model\n","car_model_tf = Sequential()\n","car_model_tf.add(Dense(32, input_dim=car_X_train_scaled.shape[1], activation='relu'))\n","car_model_tf.add(Dense(16, activation='relu'))\n","car_model_tf.add(Dense(1))\n","\n","# Compile the model\n","car_model_tf.compile(loss='mean_squared_error', optimizer='adam')\n","\n","\n","car_model_tf.fit(car_X_train_scaled, car_y_train, epochs=20, batch_size=64, validation_split=0.2)\n","\n","# Reshape the input data to have shape (None, 3)\n","car_X_test_scaled_reshaped = car_X_test_scaled.reshape(-1, 3)\n","\n","# Predict the output for new data\n","car_y_pred_tf = car_model_tf.predict(car_X_test_scaled_reshaped)\n","\n","# Save the model\n","car_model_tf.save(\"/content/gdrive/MyDrive/Vehicle_Greenix/Model/new_model/car_model.h5\")\n","\n","# Load the model\n","car_model_tf = keras.models.load_model(\"/content/gdrive/MyDrive/Vehicle_Greenix/Model/new_model/car_model.h5\")\n","\n","# Evaluate the model\n","car_mse_tf = mean_squared_error(car_y_test, car_y_pred_tf)\n","car_rmse_tf = np.sqrt(car_mse_tf)\n","car_r2_tf = r2_score(car_y_test, car_y_pred_tf)\n","\n","print(\"Hasil evaluasi performa model TensorFlow untuk Mobil:\")\n","print(\"MSE:\", car_mse_tf)\n","print(\"RMSE:\", car_rmse_tf)\n","print(\"R-squared:\", car_r2_tf)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-gL3j9buzqzN","executionInfo":{"status":"ok","timestamp":1686561671062,"user_tz":-420,"elapsed":2156,"user":{"displayName":"Novy Any Waruwu M284DSY0271","userId":"14468914389326099210"}},"outputId":"cf64f8d5-1071-47d6-ab6a-9981aaade229"},"id":"-gL3j9buzqzN","execution_count":39,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/20\n","7/7 [==============================] - 0s 23ms/step - loss: 0.2276 - val_loss: 0.1769\n","Epoch 2/20\n","7/7 [==============================] - 0s 7ms/step - loss: 0.1848 - val_loss: 0.1434\n","Epoch 3/20\n","7/7 [==============================] - 0s 7ms/step - loss: 0.1499 - val_loss: 0.1139\n","Epoch 4/20\n","7/7 [==============================] - 0s 7ms/step - loss: 0.1167 - val_loss: 0.0861\n","Epoch 5/20\n","7/7 [==============================] - 0s 7ms/step - loss: 0.0851 - val_loss: 0.0619\n","Epoch 6/20\n","7/7 [==============================] - 0s 10ms/step - loss: 0.0565 - val_loss: 0.0447\n","Epoch 7/20\n","7/7 [==============================] - 0s 7ms/step - loss: 0.0384 - val_loss: 0.0329\n","Epoch 8/20\n","7/7 [==============================] - 0s 7ms/step - loss: 0.0277 - val_loss: 0.0260\n","Epoch 9/20\n","7/7 [==============================] - 0s 10ms/step - loss: 0.0213 - val_loss: 0.0194\n","Epoch 10/20\n","7/7 [==============================] - 0s 10ms/step - loss: 0.0155 - val_loss: 0.0154\n","Epoch 11/20\n","7/7 [==============================] - 0s 7ms/step - loss: 0.0124 - val_loss: 0.0127\n","Epoch 12/20\n","7/7 [==============================] - 0s 7ms/step - loss: 0.0102 - val_loss: 0.0105\n","Epoch 13/20\n","7/7 [==============================] - 0s 6ms/step - loss: 0.0085 - val_loss: 0.0087\n","Epoch 14/20\n","7/7 [==============================] - 0s 7ms/step - loss: 0.0072 - val_loss: 0.0074\n","Epoch 15/20\n","7/7 [==============================] - 0s 7ms/step - loss: 0.0062 - val_loss: 0.0064\n","Epoch 16/20\n","7/7 [==============================] - 0s 10ms/step - loss: 0.0055 - val_loss: 0.0056\n","Epoch 17/20\n","7/7 [==============================] - 0s 6ms/step - loss: 0.0048 - val_loss: 0.0049\n","Epoch 18/20\n","7/7 [==============================] - 0s 6ms/step - loss: 0.0042 - val_loss: 0.0044\n","Epoch 19/20\n","7/7 [==============================] - 0s 6ms/step - loss: 0.0037 - val_loss: 0.0039\n","Epoch 20/20\n","7/7 [==============================] - 0s 6ms/step - loss: 0.0033 - val_loss: 0.0035\n"]},{"output_type":"stream","name":"stderr","text":["WARNING:tensorflow:6 out of the last 14 calls to <function Model.make_predict_function.<locals>.predict_function at 0x7fd6f4746560> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.\n"]},{"output_type":"stream","name":"stdout","text":["Hasil evaluasi performa model TensorFlow untuk Mobil:\n","MSE: 0.0028978511844264393\n","RMSE: 0.05383169312242036\n","R-squared: 0.9680820038959707\n"]}]},{"cell_type":"markdown","source":["Make Prediction New Data With Our Model\n"],"metadata":{"id":"qwahuB1xsMMr"},"id":"qwahuB1xsMMr"},{"cell_type":"code","execution_count":38,"metadata":{"executionInfo":{"elapsed":1179,"status":"ok","timestamp":1686561368403,"user":{"displayName":"Novy Any Waruwu M284DSY0271","userId":"14468914389326099210"},"user_tz":-420},"id":"ngMyLnKKgSRH","colab":{"base_uri":"https://localhost:8080/"},"outputId":"16189f4b-c61c-40d1-b8db-28e271e6e78b"},"outputs":[{"output_type":"stream","name":"stderr","text":["WARNING:tensorflow:5 out of the last 13 calls to <function Model.make_predict_function.<locals>.predict_function at 0x7fd704d3d1b0> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has experimental_relax_shapes=True option that relaxes argument shapes that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.\n"]},{"output_type":"stream","name":"stdout","text":["Prediksi Emisi Mobil adalah: [13.187542]\n"]}],"source":["import tensorflow as tf\n","import numpy as np\n","\n","# Load the model\n","model = tf.keras.models.load_model('/content/gdrive/MyDrive/Vehicle_Greenix/Model/new_model/car_model.h5')\n","\n","# Define the new data\n","distance = 100\n","fuel_consumption = 5\n","placeholder_value = 0\n","\n","# Scale the new data\n","new_data = np.array([[distance, fuel_consumption, placeholder_value]])\n","\n","# Make a prediction\n","prediction = model.predict(new_data)\n","\n","# Print the prediction\n","print(\"Prediksi Emisi Mobil adalah:\", prediction[0])"],"id":"ngMyLnKKgSRH"}],"metadata":{"colab":{"provenance":[{"file_id":"1SFXVL9QSRW9nzcsKiIEJVWVTCiiPJYId","timestamp":1686325166001}]},"kernelspec":{"display_name":"Python 3 (ipykernel)","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.9.7"}},"nbformat":4,"nbformat_minor":5}